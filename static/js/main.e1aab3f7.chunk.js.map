{"version":3,"sources":["redux/messageList/types.ts","redux/messageList/actions.ts","components/MessageItemDetails/index.tsx","components/MessageItem/index.tsx","components/NewMessageForm/index.tsx","components/MessageList/index.tsx","components/Tutorial/index.tsx","App.tsx","redux/messageList/reducers.ts","redux/store.ts","index.tsx"],"names":["messageListActionTypes","toggleAllMessages","type","payload","readOn","Date","formatDate","date","moment","format","MessageItemDetails","props","read","createdOn","updatedOn","Fragment","className","mapDispatchToProps","deleteMessage","id","toggleMessage","updateMessage","text","MessageItem","state","typing","input","showDetails","resetState","bind","toggleRead","handleKeyUp","handleFocusOut","handleTyping","startTyping","dispatchUpdate","dispatchDelete","toggleDetails","this","setState","e","key","target","value","toggleCheckBox","onChange","checked","updateBox","autoFocus","onKeyUp","onBlur","messageItemLabelClasses","classNames","messageItemLabel","onClick","detailsButton","deleteButton","React","Component","connect","addMessage","uuid","initialState","NewMessageForm","formRef","clearForm","createMessage","createRef","handleFocus","handleChange","current","reset","toggleAllButton","newMessageForm","ref","placeholder","onFocus","clearFormButton","createMessageButton","deleteAllMessages","selectedIds","Set","MessageList","messagesItems","messages","map","message","length","messageList","Tutorial","App","showTutorial","toggleTutorial","toggleTutorialButton","header","href","now","undefined","rootReducer","combineReducers","action","newMessage","updatedMessages","filter","numMessages","numReadMessages","store","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1aab3f7.chunk.js","sourcesContent":["export interface Message {\n    text: string;\n    read: boolean;\n    id: string;\n    createdOn: Date;\n    readOn: Date | undefined;\n    updatedOn: Date;\n}\n\nexport interface MessageListState {\n    messages: Message[];\n}\n\nexport const messageListActionTypes = {\n    ADD_MESSAGE: 'ADD_MESSAGE',\n    DELETE_MESSAGE: 'DELETE_MESSAGE',\n    DELETE_ALL_MESSAGES: 'DELETE_ALL_MESSAGES',\n    TOGGLE_MESSAGE: 'TOGGLE_MESSAGE',\n    TOGGLE_ALL_MESSAGES: 'TOGGLE_ALL_MESSAGES',\n    UPDATE_MESSAGE: 'UPDATE_MESSAGE',\n};\n\nexport interface AddMessageAction {\n    type: typeof messageListActionTypes.ADD_MESSAGE;\n    payload: {\n        text: string;\n        id: string;\n        createdOn: Date;\n    };\n}\n\nexport interface DeleteMessageAction {\n    type: typeof messageListActionTypes.DELETE_MESSAGE;\n    payload: {\n        id: string;\n    };\n}\n\nexport interface DeleteAllMessagesAction {\n    type: typeof messageListActionTypes.DELETE_ALL_MESSAGES;\n}\n\nexport interface ToggleAllMessagesAction {\n    type: typeof messageListActionTypes.TOGGLE_ALL_MESSAGES;\n    payload: {\n        readOn: Date;\n    };\n}\n\nexport interface ToggleMessageAction {\n    type: typeof messageListActionTypes.TOGGLE_MESSAGE;\n    payload: {\n        id: string;\n        readOn: Date;\n    };\n}\n\nexport interface UpdateMessageAction {\n    type: typeof messageListActionTypes.UPDATE_MESSAGE;\n    payload: {\n        id: string;\n        text: string;\n        updatedOn: Date;\n    };\n}\n\nexport type MessageListAction =\n    | AddMessageAction\n    | DeleteMessageAction\n    | DeleteAllMessagesAction\n    | ToggleMessageAction\n    | ToggleAllMessagesAction\n    | UpdateMessageAction;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddMessageAction,\n    DeleteAllMessagesAction,\n    DeleteMessageAction,\n    messageListActionTypes,\n    ToggleAllMessagesAction,\n    ToggleMessageAction,\n    UpdateMessageAction,\n} from './types';\n\nexport const addMessage = (text: string): AddMessageAction => {\n    return {\n        type: messageListActionTypes.ADD_MESSAGE,\n        payload: {\n            text: text,\n            id: uuid(),\n            createdOn: new Date(),\n        },\n    };\n};\n\nexport const deleteMessage = (id: string): DeleteMessageAction => {\n    return {\n        type: messageListActionTypes.DELETE_MESSAGE,\n        payload: {\n            id: id,\n        },\n    };\n};\n\nexport const deleteAllMessages = (): DeleteAllMessagesAction => {\n    return {\n        type: messageListActionTypes.DELETE_ALL_MESSAGES,\n    };\n};\n\nexport const toggleAllMessages = (): ToggleAllMessagesAction => {\n    return {\n        type: messageListActionTypes.TOGGLE_ALL_MESSAGES,\n        payload: {\n            readOn: new Date(),\n        },\n    };\n};\n\nexport const toggleMessage = (id: string): ToggleMessageAction => {\n    return {\n        type: messageListActionTypes.TOGGLE_MESSAGE,\n        payload: {\n            id: id,\n            readOn: new Date(),\n        },\n    };\n};\n\nexport const updateMessage = ({\n    id,\n    text,\n}: {\n    id: string;\n    text: string;\n}): UpdateMessageAction => {\n    return {\n        type: messageListActionTypes.UPDATE_MESSAGE,\n        payload: {\n            id: id,\n            text: text,\n            updatedOn: new Date(),\n        },\n    };\n};\n","import moment from 'moment';\nimport React from 'react';\n\nimport { Message } from '../../redux/messageList/types';\n\ninterface MessageItemDetailsProps extends Omit<Message, 'text' | 'id'> {}\n\nconst formatDate = (date: Date): string =>\n    moment(date).format('MMMM Do YYYY, h:mm:ss a');\n\nconst MessageItemDetails: React.FC<MessageItemDetailsProps> = (\n    props: MessageItemDetailsProps\n) => {\n    const { read, createdOn, readOn, updatedOn } = props;\n    return (\n        <React.Fragment>\n            <li className=\"message-item-detail-li\">\n                Created on: &nbsp; {formatDate(createdOn)}\n            </li>\n            {read && (\n                <li className=\"message-item-detail-li\">\n                    Read on: &nbsp; {formatDate(readOn as Date)}\n                </li>\n            )}\n            <li className=\"message-item-detail-li\">\n                Updated on: &nbsp; {formatDate(updatedOn)}\n            </li>\n        </React.Fragment>\n    );\n};\n\nexport default MessageItemDetails;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    deleteMessage,\n    toggleMessage,\n    updateMessage,\n} from '../../redux/messageList/actions';\nimport { Message } from '../../redux/messageList/types';\nimport { RootState } from '../../redux/store';\nimport MessageItemDetails from '../MessageItemDetails/';\n\ninterface DispatchProps {\n    deleteMessage: typeof deleteMessage;\n    toggleMessage: typeof toggleMessage;\n    updateMessage: typeof updateMessage;\n}\n\nconst mapDispatchToProps = {\n    deleteMessage,\n    toggleMessage,\n    updateMessage,\n};\n\ninterface StateProps {}\n\nconst mapStateToProps = null;\n\ntype OwnProps = Message;\n\ntype MessageItemProps = DispatchProps & StateProps & OwnProps;\n\ninterface MessageItemState {\n    typing: boolean;\n    input: string;\n    showDetails: boolean;\n}\n\nclass MessageItem extends React.Component<MessageItemProps, MessageItemState> {\n    constructor(props: MessageItemProps) {\n        super(props);\n        this.state = {\n            typing: false,\n            input: this.props.text,\n            showDetails: false,\n        };\n        this.resetState = this.resetState.bind(this);\n        this.toggleRead = this.toggleRead.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleFocusOut = this.handleFocusOut.bind(this);\n        this.handleTyping = this.handleTyping.bind(this);\n        this.startTyping = this.startTyping.bind(this);\n        this.dispatchUpdate = this.dispatchUpdate.bind(this);\n        this.dispatchDelete = this.dispatchDelete.bind(this);\n        this.toggleDetails = this.toggleDetails.bind(this);\n    }\n\n    resetState(): void {\n        this.setState({ typing: false, input: this.props.text });\n    }\n\n    toggleRead(): void {\n        this.props.toggleMessage(this.props.id);\n    }\n\n    handleKeyUp(e: React.KeyboardEvent<HTMLInputElement>): void {\n        if (e.key === 'Enter') {\n            if (this.state.input) {\n                this.dispatchUpdate();\n            } else {\n                this.dispatchDelete();\n            }\n            this.resetState();\n        } else if (e.key === 'Escape') {\n            this.resetState();\n        }\n    }\n\n    handleFocusOut(): void {\n        if (this.state.input) {\n            this.dispatchUpdate();\n        } else {\n            this.dispatchDelete();\n        }\n        this.resetState();\n    }\n\n    handleTyping(e: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({ ...this.state, input: e.target.value });\n    }\n\n    startTyping(): void {\n        this.setState({\n            ...this.state,\n            typing: true,\n        });\n    }\n\n    dispatchUpdate(): void {\n        this.props.updateMessage({ id: this.props.id, text: this.state.input });\n    }\n\n    dispatchDelete(): void {\n        this.props.deleteMessage(this.props.id);\n    }\n\n    toggleDetails(): void {\n        this.setState({ ...this.state, showDetails: !this.state.showDetails });\n    }\n\n    render(): JSX.Element {\n        const toggleCheckBox = (\n            <input\n                type=\"checkbox\"\n                className=\"message-check-box\"\n                onChange={this.toggleRead}\n                checked={this.props.read}\n            />\n        );\n\n        const updateBox = (\n            <input\n                autoFocus\n                type=\"text\"\n                value={this.state.input}\n                onKeyUp={this.handleKeyUp}\n                onBlur={this.handleFocusOut}\n                className=\"update-Box\"\n                onChange={this.handleTyping}\n            />\n        );\n\n        const messageItemLabelClasses = classNames({\n            'message-label': true,\n            'messages-strikethrough': this.props.read,\n        });\n\n        const messageItemLabel = (\n            <label onClick={this.startTyping} className={messageItemLabelClasses}>\n                {this.props.text}\n            </label>\n        );\n\n        const detailsButton = (\n            <button className=\"details-btn\" onClick={this.toggleDetails}>\n                ...\n            </button>\n        );\n\n        const deleteButton = (\n            <button className=\"delete-btn\" onClick={this.dispatchDelete}>\n                x\n            </button>\n        );\n\n        if (this.state.typing === false) {\n            return (\n                <React.Fragment>\n                    <li>\n                        {toggleCheckBox}\n                        {messageItemLabel}\n                        {deleteButton}\n                        {detailsButton}\n                    </li>\n                    {this.state.showDetails && (\n                        <MessageItemDetails\n                            read={this.props.read}\n                            createdOn={this.props.createdOn}\n                            readOn={this.props.readOn}\n                            updatedOn={this.props.updatedOn}\n                        />\n                    )}\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <li>\n                    {toggleCheckBox}\n                    {updateBox}\n                    {deleteButton}\n                </li>\n            );\n        }\n        // return (\n        //     <li>\n        //         {toggleCheckBox}\n        //         {this.state.typing ? updateBox : messageItemLabel}\n        //         {deleteButton}\n        //         {!this.state.typing && detailsButton}\n        //     </li>\n        // );\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(MessageItem);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { addMessage, toggleAllMessages } from '../../redux/messageList/actions';\nimport { RootState } from '../../redux/store';\n\ninterface DispatchProps {\n    addMessage: typeof addMessage;\n    toggleAllMessages: typeof toggleAllMessages;\n}\n\nconst mapDispatchToProps: DispatchProps = {\n    addMessage,\n    toggleAllMessages,\n};\n\ninterface StateProps {}\n\nconst mapStateToProps = null;\n\ninterface OwnProps {}\n\ntype NewMessageFormProps = DispatchProps & StateProps & OwnProps;\n\ninterface NewMessageFormState {\n    input: string;\n    typing: boolean;\n}\n\nconst initialState: NewMessageFormState = {\n    input: '',\n    typing: false,\n};\n\nclass NewMessageForm extends React.Component<\n    NewMessageFormProps,\n    NewMessageFormState\n> {\n    constructor(props: NewMessageFormProps) {\n        super(props);\n        this.state = initialState;\n        this.clearForm = this.clearForm.bind(this);\n        this.createMessage = this.createMessage.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.formRef = React.createRef();\n        this.handleFocus = this.handleFocus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    formRef: React.RefObject<HTMLFormElement>;\n\n    clearForm(): void {\n        this.setState(initialState);\n        if (this.formRef.current) {\n            this.formRef.current.reset();\n        }\n    }\n\n    createMessage(): void {\n        this.props.addMessage(this.state.input);\n        this.setState(initialState);\n    }\n\n    handleKeyUp(e: React.KeyboardEvent<HTMLInputElement>): void {\n        if (e.key === 'Enter') {\n            this.props.addMessage(this.state.input);\n            this.setState(initialState);\n        }\n    }\n\n    handleFocus(): void {\n        this.setState({ ...this.state, typing: true });\n    }\n\n    handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({ ...this.state, input: e.target.value });\n    }\n\n    render(): JSX.Element {\n        const toggleAllButton = (\n            <input\n                id=\"toggle-all-btn\"\n                type=\"checkbox\"\n                onClick={this.props.toggleAllMessages}\n            />\n        );\n        const newMessageForm = (\n            <form id=\"create-message-form\" ref={this.formRef}>\n                <input\n                    id=\"create-message-input\"\n                    type=\"text\"\n                    placeholder=\"Add a new message\"\n                    onKeyUp={this.handleKeyUp}\n                    onFocus={this.handleFocus}\n                    onChange={this.handleChange}\n                    value={this.state.input}\n                />\n            </form>\n        );\n        const clearFormButton = (\n            <button className=\"delete-btn\" onClick={this.clearForm}>\n                x\n            </button>\n        );\n        const createMessageButton = (\n            <button id=\"create-message-btn\" onClick={this.createMessage}>\n                +\n            </button>\n        );\n        return (\n            <React.Fragment>\n                {toggleAllButton}\n                {newMessageForm}\n                {clearFormButton}\n                {this.state.typing && createMessageButton}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(NewMessageForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    deleteAllMessages,\n    toggleAllMessages,\n} from '../../redux/messageList/actions';\nimport { Message } from '../../redux/messageList/types';\nimport { RootState } from '../../redux/store';\nimport MessageItem from '../MessageItem';\nimport NewMessageForm from '../NewMessageForm/';\n\ninterface DispatchProps {\n    deleteAllMessages: typeof deleteAllMessages;\n    toggleAllMessages: typeof toggleAllMessages;\n}\n\nconst mapDispatchToProps = {\n    deleteAllMessages,\n    toggleAllMessages,\n};\n\ninterface StateProps {\n    messages: Message[];\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nconst mapStateToProps = (state: RootState) => ({\n    messages: state.messageList.messages,\n});\n\ninterface OwnProps {}\n\ntype MessageListProps = DispatchProps & StateProps & OwnProps;\n\ninterface MessageListState {\n    selectedIds: Set<string>;\n}\n\nconst initialState: MessageListState = {\n    selectedIds: new Set<string>(),\n};\n\nclass MessageList extends React.Component<MessageListProps, MessageListState> {\n    state = initialState;\n\n    render(): JSX.Element {\n        const toggleAllButton = (\n            <input\n                id=\"toggle-all-btn\"\n                className=\"hide\"\n                type=\"checkbox\"\n                onClick={this.props.toggleAllMessages}\n            />\n        );\n        const messagesItems: JSX.Element[] = this.props.messages.map(message => (\n            <MessageItem\n                text={message.text}\n                read={message.read}\n                id={message.id}\n                key={message.id}\n                createdOn={message.createdOn}\n                readOn={message.readOn}\n                updatedOn={message.updatedOn}\n            />\n        ));\n        return (\n            <div className=\"content-div\">\n                <div className=\"message-create-div\">\n                    {this.props.messages.length > 0 && toggleAllButton}\n                    <NewMessageForm />\n                </div>\n                <div className=\"messages-view-box\">\n                    <br />\n                    <ul>{messagesItems}</ul>\n                </div>\n                <a id=\"delete-all-button\" onClick={this.props.deleteAllMessages}>\n                    DELETE ALL\n                </a>\n            </div>\n        );\n    }\n}\n\n// a reference to the type definitions of connect\n// https://github.com/DefinitelyTyped/DefinitelyTyped/issues/16990#issuecomment-507509882\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(MessageList);\n","/* eslint-disable react/no-unescaped-entities */\nimport React from 'react';\n\nconst Tutorial: React.FC = () => (\n    <div className=\"tutorial-div\">\n        <h2>Track your messages</h2>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">1-ADD</span>\n            <div className=\"feature-text\">\n                Add a new message by pressing the enter key or tap the '+' button.\n            </div>\n        </div>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">2-SEE</span>\n            <div className=\"feature-text\">\n                You'll see it right after you add a message. Your latest message will\n                appear first on the list.\n            </div>\n        </div>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">3-CHECK</span>\n            <div className=\"feature-text\">\n                Check off what you've read with the dark blue checkbox next to your\n                message. Mark all your messages as read with the dark blue check\n                button.\n            </div>\n        </div>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">4-CHANGE</span>\n            <div className=\"feature-text\">\n                Make changes by tapping on your message. Save it by pressing the\n                enter key or tapping outside of the box. Cancel your change by\n                pressing escape key on your keyword.\n            </div>\n        </div>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">5-DELETE</span>\n            <div className=\"feature-text\">\n                Delete your message by tapping the 'x' button next to your message.\n                Delete all messages by tapping the 'x' button on the top.\n            </div>\n        </div>\n    </div>\n);\n\nexport default Tutorial;\n","import './App.css';\n\nimport React from 'react';\n\nimport MessageList from './components/MessageList/';\nimport Tutorial from './components/Tutorial';\n\ninterface AppProps {}\ninterface AppState {\n    showTutorial: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            showTutorial: false,\n        };\n        this.toggleTutorial = this.toggleTutorial.bind(this);\n    }\n\n    toggleTutorial(): void {\n        this.setState({\n            ...this.state,\n            showTutorial: !this.state.showTutorial,\n        });\n    }\n    render(): JSX.Element {\n        const toggleTutorialButton = (\n            <button id=\"tutorial-btn\" onClick={this.toggleTutorial}>\n                ?\n            </button>\n        );\n\n        const header = (\n            <div className=\"header-div\">\n                <div className=\"title-div\">\n                    <span className=\"title\">\n                        <a href=\"#\">Your Messages</a>\n                    </span>\n                    <span className=\"author\">\n                        <a href=\"https://cgao.info\">&nbsp; Chuntong Gao &nbsp;</a>\n                    </span>\n                    {toggleTutorialButton}\n                </div>\n            </div>\n        );\n\n        return (\n            <div className=\"app-container\">\n                {header}\n                {this.state.showTutorial && <Tutorial />}\n                <MessageList />\n                <div className=\"spacer\" />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddMessageAction,\n    DeleteMessageAction,\n    Message,\n    MessageListAction,\n    messageListActionTypes,\n    MessageListState,\n    ToggleMessageAction,\n    UpdateMessageAction,\n} from './types';\n\nconst now: Date = new Date();\nconst initialState: MessageListState = {\n    messages: [\n        {\n            text: 'This is a read message',\n            read: true,\n            id: uuid(),\n            createdOn: now,\n            readOn: undefined,\n            updatedOn: now,\n        },\n        {\n            text: 'This is an unread message',\n            read: false,\n            id: uuid(),\n            createdOn: now,\n            readOn: undefined,\n            updatedOn: now,\n        },\n    ],\n};\n\nexport default (\n    state: MessageListState = initialState,\n    action: MessageListAction\n): MessageListState => {\n    switch (action.type) {\n        case messageListActionTypes.ADD_MESSAGE: {\n            const { text, id, createdOn } = (action as AddMessageAction).payload;\n            const newMessage = {\n                text: text,\n                read: false,\n                id: id,\n                createdOn: createdOn,\n                readOn: undefined,\n                updatedOn: createdOn,\n            };\n            return {\n                messages: [...state.messages, newMessage],\n            };\n        }\n\n        case messageListActionTypes.DELETE_MESSAGE: {\n            const { id } = (action as DeleteMessageAction).payload;\n            const updatedMessages: Message[] = state.messages.filter(\n                message => message.id !== id\n            );\n            return {\n                messages: updatedMessages,\n            };\n        }\n\n        case messageListActionTypes.DELETE_ALL_MESSAGES: {\n            return {\n                messages: [],\n            };\n        }\n\n        case messageListActionTypes.TOGGLE_MESSAGE: {\n            const updatedMessages: Message[] = state.messages.map(message => {\n                const { id, readOn } = (action as ToggleMessageAction).payload;\n                if (message.id === id) {\n                    if (message.read === true) {\n                        return { ...message, read: false, readOn: undefined };\n                    } else {\n                        return { ...message, read: true, readOn: readOn };\n                    }\n                } else {\n                    return message;\n                }\n            });\n            return {\n                messages: updatedMessages,\n            };\n        }\n\n        case messageListActionTypes.TOGGLE_ALL_MESSAGES: {\n            const numMessages: number = state.messages.length;\n            let numReadMessages = 0;\n\n            for (const message of state.messages) {\n                if (message.read === true) {\n                    numReadMessages = numReadMessages + 1;\n                }\n            }\n\n            const updatedMessages: Message[] = state.messages.map(message => {\n                if (numReadMessages === numMessages) {\n                    // if all messages have been read\n                    // make all messages unread\n                    return { ...message, read: false };\n                } else {\n                    // otherwise make all messages read\n                    return { ...message, read: true };\n                }\n            });\n\n            return {\n                messages: updatedMessages,\n            };\n        }\n\n        case messageListActionTypes.UPDATE_MESSAGE: {\n            const updatedMessages: Message[] = [...state.messages];\n            const { id, text, updatedOn } = (action as UpdateMessageAction).payload;\n            for (const message of updatedMessages) {\n                if (message.id === id) {\n                    message.text = text;\n                    message.updatedOn = updatedOn;\n                }\n            }\n            return {\n                messages: updatedMessages,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n};\n","import { applyMiddleware, combineReducers, createStore, Middleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport messageListReducer from './messageList/reducers';\n\nconst rootReducer = combineReducers({\n    messageList: messageListReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/explicit-module-boundary-types\nexport const configureStore = () => {\n    const middlewares: Middleware[] = [];\n    const middleWareEnhancer = applyMiddleware(...middlewares);\n    const store = createStore(rootReducer, composeWithDevTools(middleWareEnhancer));\n    return store;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { configureStore } from './redux/store';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}