{"version":3,"sources":["redux/messageList/types.ts","redux/messageList/actions.ts","components/MessageItem/index.tsx","components/NewMessageForm/index.tsx","components/MessageList/index.tsx","components/Tutorial/index.tsx","App.tsx","redux/messageList/reducers.ts","redux/store.ts","index.tsx"],"names":["messageListActionTypes","deleteMessages","ids","type","payload","toggleAllMessages","toggleMessages","mapDispatchToProps","updateMessage","id","text","MessageItem","props","state","typing","input","resetState","bind","toggleRead","handleKeyUp","handleFocusOut","handleTyping","startTyping","dispatchUpdate","dispatchDelete","this","setState","set","Set","add","e","key","target","value","toggleCheckBox","className","onChange","checked","read","updateBox","autoFocus","onKeyUp","onBlur","messageItemLabelClasses","classNames","messageItemLabel","onClick","deleteButton","React","Component","connect","addMessage","uuid","initialState","NewMessageForm","formRef","clearForm","createMessage","createRef","handleFocus","handleChange","current","reset","toggleAllButton","newMessageForm","ref","placeholder","onFocus","clearFormButton","createMessageButton","Fragment","deleteAllMessages","selectedIds","MessageList","messagesItems","messages","map","message","length","messageList","Tutorial","App","showTutorial","toggleTutorial","toggleTutorialButton","header","href","rootReducer","combineReducers","action","newMessage","updatedMessages","filter","has","numMessages","numReadMessages","store","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4eb2099.chunk.js","sourcesContent":["export interface Message {\n    text: string;\n    read: boolean;\n    id: string;\n}\n\nexport interface MessageListState {\n    messages: Message[];\n}\n\nexport const messageListActionTypes = {\n    ADD_MESSAGE: 'ADD_MESSAGE',\n    DELETE_MESSAGES: 'DELETE_MESSAGES',\n    DELETE_ALL_MESSAGES: 'DELETE_ALL_MESSAGES',\n    TOGGLE_MESSAGES: 'TOGGLE_MESSAGES',\n    TOGGLE_ALL_MESSAGES: 'TOGGLE_ALL_MESSAGES',\n    UPDATE_MESSAGE: 'UPDATE_MESSAGE',\n};\n\nexport interface AddMessageAction {\n    type: typeof messageListActionTypes.ADD_MESSAGE;\n    payload: {\n        text: string;\n        id: string;\n    };\n}\n\nexport interface DeleteMessagesAction {\n    type: typeof messageListActionTypes.DELETE_MESSAGES;\n    payload: {\n        ids: Set<string>;\n    };\n}\n\nexport interface DeleteAllMessagesAction {\n    type: typeof messageListActionTypes.DELETE_ALL_MESSAGES;\n}\n\nexport interface ToggleAllMessagesAction {\n    type: typeof messageListActionTypes.TOGGLE_ALL_MESSAGES;\n}\n\nexport interface ToggleMessagesAction {\n    type: typeof messageListActionTypes.DELETE_MESSAGES;\n    payload: {\n        ids: Set<string>;\n    };\n}\n\nexport interface UpdateMessageAction {\n    type: typeof messageListActionTypes.UPDATE_MESSAGE;\n    payload: {\n        id: string;\n        text: string;\n    };\n}\n\nexport type MessageListAction =\n    | AddMessageAction\n    | DeleteMessagesAction\n    | DeleteAllMessagesAction\n    | ToggleMessagesAction\n    | ToggleAllMessagesAction\n    | UpdateMessageAction;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddMessageAction,\n    DeleteAllMessagesAction,\n    DeleteMessagesAction,\n    messageListActionTypes,\n    ToggleAllMessagesAction,\n    ToggleMessagesAction,\n    UpdateMessageAction,\n} from './types';\n\nexport const addMessage = (text: string): AddMessageAction => {\n    return {\n        type: messageListActionTypes.ADD_MESSAGE,\n        payload: {\n            text: text,\n            id: uuid(),\n        },\n    };\n};\n\nexport const deleteMessages = (ids: Set<string>): DeleteMessagesAction => {\n    return {\n        type: messageListActionTypes.DELETE_MESSAGES,\n        payload: {\n            ids: ids,\n        },\n    };\n};\n\nexport const deleteAllMessages = (): DeleteAllMessagesAction => {\n    return {\n        type: messageListActionTypes.DELETE_ALL_MESSAGES,\n    };\n};\n\nexport const toggleAllMessages = (): ToggleAllMessagesAction => {\n    return {\n        type: messageListActionTypes.TOGGLE_ALL_MESSAGES,\n    };\n};\n\nexport const toggleMessages = (ids: Set<string>): ToggleMessagesAction => {\n    return {\n        type: messageListActionTypes.TOGGLE_MESSAGES,\n        payload: {\n            ids: ids,\n        },\n    };\n};\n\nexport const updateMessage = ({\n    id,\n    text,\n}: {\n    id: string;\n    text: string;\n}): UpdateMessageAction => {\n    return {\n        type: messageListActionTypes.UPDATE_MESSAGE,\n        payload: {\n            id: id,\n            text: text,\n        },\n    };\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    deleteMessages,\n    toggleMessages,\n    updateMessage,\n} from '../../redux/messageList/actions';\nimport { Message } from '../../redux/messageList/types';\nimport { RootState } from '../../redux/store';\n\ninterface DispatchProps {\n    deleteMessages: typeof deleteMessages;\n    toggleMessages: typeof toggleMessages;\n    updateMessage: typeof updateMessage;\n}\n\nconst mapDispatchToProps = {\n    deleteMessages,\n    toggleMessages,\n    updateMessage,\n};\n\ninterface StateProps {}\n\nconst mapStateToProps = null;\n\ntype OwnProps = Message;\n\ntype MessageItemProps = DispatchProps & StateProps & OwnProps;\n\ninterface MessageItemState {\n    typing: boolean;\n    input: string;\n}\n\nclass MessageItem extends React.Component<MessageItemProps, MessageItemState> {\n    constructor(props: MessageItemProps) {\n        super(props);\n        this.state = {\n            typing: false,\n            input: this.props.text,\n        };\n        this.resetState = this.resetState.bind(this);\n        this.toggleRead = this.toggleRead.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleFocusOut = this.handleFocusOut.bind(this);\n        this.handleTyping = this.handleTyping.bind(this);\n        this.startTyping = this.startTyping.bind(this);\n        this.dispatchUpdate = this.dispatchUpdate.bind(this);\n        this.dispatchDelete = this.dispatchDelete.bind(this);\n    }\n\n    resetState(): void {\n        this.setState({ typing: false, input: this.props.text });\n    }\n\n    toggleRead(): void {\n        const set: Set<string> = new Set<string>();\n        set.add(this.props.id);\n        this.props.toggleMessages(set);\n    }\n\n    handleKeyUp(e: React.KeyboardEvent<HTMLInputElement>): void {\n        if (e.key === 'Enter') {\n            if (this.state.input) {\n                this.dispatchUpdate();\n            } else {\n                this.dispatchDelete();\n            }\n            this.resetState();\n        } else if (e.key === 'Escape') {\n            this.resetState();\n        }\n    }\n\n    handleFocusOut(): void {\n        if (this.state.input) {\n            this.dispatchUpdate();\n        } else {\n            this.dispatchDelete();\n        }\n        this.resetState();\n    }\n\n    handleTyping(e: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({ ...this.state, input: e.target.value });\n    }\n\n    startTyping(): void {\n        this.setState({\n            ...this.state,\n            typing: true,\n        });\n    }\n\n    dispatchUpdate(): void {\n        this.props.updateMessage({ id: this.props.id, text: this.state.input });\n    }\n\n    dispatchDelete(): void {\n        const set: Set<string> = new Set<string>();\n        set.add(this.props.id);\n        this.props.deleteMessages(set);\n    }\n\n    render(): JSX.Element {\n        const toggleCheckBox = (\n            <input\n                type=\"checkbox\"\n                className=\"message-check-box\"\n                onChange={this.toggleRead}\n                checked={this.props.read}\n            />\n        );\n        const updateBox = (\n            <input\n                autoFocus\n                type=\"text\"\n                value={this.state.input}\n                onKeyUp={this.handleKeyUp}\n                onBlur={this.handleFocusOut}\n                className=\"update-Box\"\n                onChange={this.handleTyping}\n            />\n        );\n        const messageItemLabelClasses = classNames({\n            'message-label': true,\n            'messages-strikethrough': this.props.read,\n        });\n        const messageItemLabel = (\n            <label onClick={this.startTyping} className={messageItemLabelClasses}>\n                {this.props.text}\n            </label>\n        );\n        const deleteButton = (\n            <button className=\"delete-btn\" onClick={this.dispatchDelete}>\n                x\n            </button>\n        );\n        return (\n            <li>\n                {toggleCheckBox}\n                {this.state.typing ? updateBox : messageItemLabel}\n                {deleteButton}\n            </li>\n        );\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(MessageItem);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { addMessage, toggleAllMessages } from '../../redux/messageList/actions';\nimport { RootState } from '../../redux/store';\n\ninterface DispatchProps {\n    addMessage: typeof addMessage;\n    toggleAllMessages: typeof toggleAllMessages;\n}\n\nconst mapDispatchToProps: DispatchProps = {\n    addMessage,\n    toggleAllMessages,\n};\n\ninterface StateProps {}\n\nconst mapStateToProps = null;\n\ninterface OwnProps {}\n\ntype NewMessageFormProps = DispatchProps & StateProps & OwnProps;\n\ninterface NewMessageFormState {\n    input: string;\n    typing: boolean;\n}\n\nconst initialState: NewMessageFormState = {\n    input: '',\n    typing: false,\n};\n\nclass NewMessageForm extends React.Component<\n    NewMessageFormProps,\n    NewMessageFormState\n> {\n    constructor(props: NewMessageFormProps) {\n        super(props);\n        this.state = initialState;\n        this.clearForm = this.clearForm.bind(this);\n        this.createMessage = this.createMessage.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.formRef = React.createRef();\n        this.handleFocus = this.handleFocus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    formRef: React.RefObject<HTMLFormElement>;\n\n    clearForm(): void {\n        this.setState(initialState);\n        if (this.formRef.current) {\n            this.formRef.current.reset();\n        }\n    }\n\n    createMessage(): void {\n        this.props.addMessage(this.state.input);\n        this.setState(initialState);\n    }\n\n    handleKeyUp(e: React.KeyboardEvent<HTMLInputElement>): void {\n        if (e.key === 'Enter') {\n            this.props.addMessage(this.state.input);\n            this.setState(initialState);\n        }\n    }\n\n    handleFocus(): void {\n        this.setState({ ...this.state, typing: true });\n    }\n\n    handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({ ...this.state, input: e.target.value });\n    }\n\n    render(): JSX.Element {\n        const toggleAllButton = (\n            <input\n                id=\"toggle-all-btn\"\n                type=\"checkbox\"\n                onClick={this.props.toggleAllMessages}\n            />\n        );\n        const newMessageForm = (\n            <form id=\"create-message-form\" ref={this.formRef}>\n                <input\n                    id=\"create-message-input\"\n                    type=\"text\"\n                    placeholder=\"Add a new message\"\n                    onKeyUp={this.handleKeyUp}\n                    onFocus={this.handleFocus}\n                    onChange={this.handleChange}\n                    value={this.state.input}\n                />\n            </form>\n        );\n        const clearFormButton = (\n            <button className=\"delete-btn\" onClick={this.clearForm}>\n                x\n            </button>\n        );\n        const createMessageButton = (\n            <button id=\"create-message-btn\" onClick={this.createMessage}>\n                +\n            </button>\n        );\n        return (\n            <React.Fragment>\n                {toggleAllButton}\n                {newMessageForm}\n                {clearFormButton}\n                {this.state.typing && createMessageButton}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(NewMessageForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    deleteAllMessages,\n    deleteMessages,\n    toggleAllMessages,\n    toggleMessages,\n} from '../../redux/messageList/actions';\nimport { Message } from '../../redux/messageList/types';\nimport { RootState } from '../../redux/store';\nimport MessageItem from '../MessageItem';\nimport NewMessageForm from '../NewMessageForm/';\n\ninterface DispatchProps {\n    deleteMessages: typeof deleteMessages;\n    deleteAllMessages: typeof deleteAllMessages;\n    toggleMessages: typeof toggleMessages;\n    toggleAllMessages: typeof toggleAllMessages;\n}\n\nconst mapDispatchToProps = {\n    deleteMessages,\n    deleteAllMessages,\n    toggleMessages,\n    toggleAllMessages,\n};\n\ninterface StateProps {\n    messages: Message[];\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nconst mapStateToProps = (state: RootState) => ({\n    messages: state.messageList.messages,\n});\n\ninterface OwnProps {}\n\ntype MessageListProps = DispatchProps & StateProps & OwnProps;\n\ninterface MessageListState {\n    selectedIds: Set<string>;\n}\n\nconst initialState: MessageListState = {\n    selectedIds: new Set<string>(),\n};\n\nclass MessageList extends React.Component<MessageListProps, MessageListState> {\n    state = initialState;\n\n    render(): JSX.Element {\n        const toggleAllButton = (\n            <input\n                id=\"toggle-all-btn\"\n                className=\"hide\"\n                type=\"checkbox\"\n                onClick={this.props.toggleAllMessages}\n            />\n        );\n        const messagesItems: JSX.Element[] = this.props.messages.map(message => (\n            <MessageItem\n                text={message.text}\n                read={message.read}\n                id={message.id}\n                key={message.id}\n            />\n        ));\n        return (\n            <div className=\"content-div\">\n                <div className=\"message-create-div\">\n                    {this.props.messages.length > 0 && toggleAllButton}\n                    <NewMessageForm />\n                </div>\n                <div className=\"messages-view-box\">\n                    <br />\n                    <ul>{messagesItems}</ul>\n                </div>\n                <a id=\"delete-all-button\" onClick={this.props.deleteAllMessages}>\n                    DELETE ALL\n                </a>\n            </div>\n        );\n    }\n}\n\n// a reference to the type definitions of connect\n// https://github.com/DefinitelyTyped/DefinitelyTyped/issues/16990#issuecomment-507509882\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(MessageList);\n","/* eslint-disable react/no-unescaped-entities */\nimport React from 'react';\n\nconst Tutorial: React.FC = () => (\n    <div className=\"tutorial-div\">\n        <h2>Track your messages</h2>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">1-ADD</span>\n            <div className=\"feature-text\">\n                Add a new message by pressing the enter key or tap the '+' button.\n            </div>\n        </div>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">2-SEE</span>\n            <div className=\"feature-text\">\n                You'll see it right after you add a message. Your latest message will\n                appear first on the list.\n            </div>\n        </div>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">3-CHECK</span>\n            <div className=\"feature-text\">\n                Check off what you've read with the dark blue checkbox next to your\n                message. Mark all your messages as read with the dark blue check\n                button.\n            </div>\n        </div>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">4-CHANGE</span>\n            <div className=\"feature-text\">\n                Make changes by tapping on your message. Save it by pressing the\n                enter key or tapping outside of the box. Cancel your change by\n                pressing escape key on your keyword.\n            </div>\n        </div>\n        <div className=\"feature-div\">\n            <span className=\"feature-title\">5-DELETE</span>\n            <div className=\"feature-text\">\n                Delete your message by tapping the 'x' button next to your message.\n                Delete all messages by tapping the 'x' button on the top.\n            </div>\n        </div>\n    </div>\n);\n\nexport default Tutorial;\n","import './App.css';\n\nimport React from 'react';\n\nimport MessageList from './components/MessageList/';\nimport Tutorial from './components/Tutorial';\n\ninterface AppProps {}\ninterface AppState {\n    showTutorial: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            showTutorial: false,\n        };\n        this.toggleTutorial = this.toggleTutorial.bind(this);\n    }\n\n    toggleTutorial(): void {\n        this.setState({\n            ...this.state,\n            showTutorial: !this.state.showTutorial,\n        });\n    }\n    render(): JSX.Element {\n        const toggleTutorialButton = (\n            <button id=\"tutorial-btn\" onClick={this.toggleTutorial}>\n                ?\n            </button>\n        );\n\n        const header = (\n            <div className=\"header-div\">\n                <div className=\"title-div\">\n                    <span className=\"title\">\n                        <a href=\"#\">Your Messages</a>\n                    </span>\n                    <span className=\"author\">\n                        <a href=\"https://cgao.info\">&nbsp; Chuntong Gao &nbsp;</a>\n                    </span>\n                    {toggleTutorialButton}\n                </div>\n            </div>\n        );\n\n        return (\n            <div className=\"app-container\">\n                {header}\n                {this.state.showTutorial && <Tutorial />}\n                <MessageList />\n                <div className=\"spacer\" />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddMessageAction,\n    DeleteMessagesAction,\n    Message,\n    MessageListAction,\n    messageListActionTypes,\n    MessageListState,\n    ToggleMessagesAction,\n    UpdateMessageAction,\n} from './types';\n\nconst initialState: MessageListState = {\n    messages: [\n        {\n            text: 'This is a read message',\n            read: true,\n            id: uuid(),\n        },\n        {\n            text: 'This is an unread message',\n            read: false,\n            id: uuid(),\n        },\n    ],\n};\n\nexport default (\n    state: MessageListState = initialState,\n    action: MessageListAction\n): MessageListState => {\n    switch (action.type) {\n        case messageListActionTypes.ADD_MESSAGE: {\n            const { text, id } = (action as AddMessageAction).payload;\n            const newMessage = {\n                text: text,\n                read: false,\n                id: id,\n            };\n            return {\n                messages: [...state.messages, newMessage],\n            };\n        }\n\n        case messageListActionTypes.DELETE_MESSAGES: {\n            const updatedMessages: Message[] = state.messages.filter(\n                message =>\n                    !(action as DeleteMessagesAction).payload.ids.has(message.id)\n            );\n            return {\n                messages: updatedMessages,\n            };\n        }\n\n        case messageListActionTypes.DELETE_ALL_MESSAGES: {\n            return {\n                messages: [],\n            };\n        }\n\n        case messageListActionTypes.TOGGLE_MESSAGES: {\n            const updatedMessages: Message[] = state.messages.map(message => {\n                if ((action as ToggleMessagesAction).payload.ids.has(message.id)) {\n                    return { ...message, read: !message.read };\n                } else {\n                    return message;\n                }\n            });\n            return {\n                messages: updatedMessages,\n            };\n        }\n\n        case messageListActionTypes.TOGGLE_ALL_MESSAGES: {\n            const numMessages: number = state.messages.length;\n            let numReadMessages = 0;\n\n            for (const message of state.messages) {\n                if (message.read === true) {\n                    numReadMessages = numReadMessages + 1;\n                }\n            }\n\n            const updatedMessages: Message[] = state.messages.map(message => {\n                if (numReadMessages === numMessages) {\n                    // if all messages have been read\n                    // make all messages unread\n                    return { ...message, read: false };\n                } else {\n                    // otherwise make all messages read\n                    return { ...message, read: true };\n                }\n            });\n\n            return {\n                messages: updatedMessages,\n            };\n        }\n\n        case messageListActionTypes.UPDATE_MESSAGE: {\n            const updatedMessages: Message[] = [...state.messages];\n            const { id, text } = (action as UpdateMessageAction).payload;\n            for (const message of updatedMessages) {\n                if (message.id === id) {\n                    message.text = text;\n                }\n            }\n            return {\n                messages: updatedMessages,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n};\n","import { applyMiddleware, combineReducers, createStore, Middleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport messageListReducer from './messageList/reducers';\n\nconst rootReducer = combineReducers({\n    messageList: messageListReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/explicit-module-boundary-types\nexport const configureStore = () => {\n    const middlewares: Middleware[] = [];\n    const middleWareEnhancer = applyMiddleware(...middlewares);\n    const store = createStore(rootReducer, composeWithDevTools(middleWareEnhancer));\n    return store;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { configureStore } from './redux/store';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}